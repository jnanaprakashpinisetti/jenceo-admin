// WorkerBioDataForm.js
// Full file â€” robust auto-ID generator that includes ExitEmployees node when scanning.
// It reads worker IDs from many likely DB nodes (including ExitEmployees), prefers JW prefix,
// finds numeric max and increments, preserves padding, and always runs when modal opens.

import React, { useEffect, useRef, useState } from "react";
import firebaseDB, { storageRef, uploadFile, getDownloadURL } from "../../firebase";

import BasicInformation from "./BasicInformation";
import PermanentAddress from "./PermanentAddress";
import PresentAddress from "./PresentAddress";
import PersonalInformation from "./PersonalInformation";
import QualificationSkills from "./QualificationSkills";
import HealthDetails from "./HealthDetails";
import EmergencyContact1 from "./EmergencyContact1";
import EmergencyContact2 from "./EmergencyContact2";
import EmergencyContact3 from "./EmergencyContact3";
import BankDetails from "./BankDetails";

import "../../scss/components/_WorkerBioDataForm.scss";

const DEFAULT_PHOTO_URL =
  "https://firebasestorage.googleapis.com/v0/b/jenceo-admin.firebasestorage.app/o/OfficeFiles%2FSample-Photo.jpg?alt=media&token=01855b47-c9c2-490e-b400-05851192dde7";

const TOTAL_STEPS = 10;

const initialFormData = {
  idNo: "",
  date: "",
  firstName: "",
  lastName: "",
  gender: "",
  dateOfBirth: "",
  years: "",
  co: "",
  mobileNo1: "",
  mobileNo2: "",
  aadharNo: "",
  localId: "",
  permanentAddress: "",
  permanentStreet: "",
  permanentLandmark: "",
  permanentVillage: "",
  permanentMandal: "",
  permanentDistrict: "",
  permanentState: "",
  permanentPincode: "",
  presentAddress: "",
  presentStreet: "",
  presentLandmark: "",
  presentVillage: "",
  presentMandal: "",
  presentDistrict: "",
  presentState: "",
  presentPincode: "",
  maritalStatus: "",
  dateOfMarriage: "",
  marriageYears: "",
  childName1: "",
  childName2: "",
  religion: "",
  cast: "",
  qualification: "",
  schoolCollege: "",
  primarySkill: "",
  workExperince: "",
  workingSkills: [],
  motherTongue: "",
  languages: "",
  healthIssues: [],
  otherIssues: "",
  dietaryPreference: "",
  bloodGroup: "",
  height: "",
  weight: "",
  emergencyContact1: { name: "", relation: "", address: "", village: "", mandal: "", state: "", mobile1: "", mobile2: "" },
  emergencyContact2: { name: "", relation: "", address: "", village: "", mandal: "", state: "", mobile1: "", mobile2: "" },
  emergencyContact3: { name: "", relation: "", address: "", village: "", mandal: "", state: "", mobile1: "", mobile2: "" },
  accountNo: "",
  bankName: "",
  branchName: "",
  ifscCode: "",
  phonePayNo: "",
  phonePayName: "",
  googlePayNo: "",
  googlePayName: "",
  basicSalary: "",
  pageNo: "",
  aboutEmployee: "",
  employeePhoto: null,
  employeePhotoFile: null,
};

const WorkerBioDataForm = ({ isOpen = false, onClose = () => { }, onSaved }) => {
  const [step, setStep] = useState(1);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  const [existingEmployee, setExistingEmployee] = useState(null);
  const [showIdExistsModal, setShowIdExistsModal] = useState(false);

  const [successOpen, setSuccessOpen] = useState(false);
  const [successInfo, setSuccessInfo] = useState({ idNo: "", name: "", recordId: "" });

  const firstRender = useRef(true);

  const [formData, setFormData] = useState({ ...initialFormData });

  // mark whether id was auto generated (to disable editing)
  const [idAutoGenerated, setIdAutoGenerated] = useState(false);

  // helpers
  const validateMobileNumber = (mobile) => /^\d{10}$/.test(String(mobile || ""));
  const validatePincode = (p) => /^\d{6}$/.test(String(p || ""));
  const isOver18 = (dateString) => {
    if (!dateString) return false;
    const d = new Date(dateString);
    if (Number.isNaN(d.getTime())) return false;
    const today = new Date();
    let age = today.getFullYear() - d.getFullYear();
    const m = today.getMonth() - d.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < d.getDate())) age--;
    return age >= 18;
  };
  const computeYears = (dob) => {
    if (!dob) return "";
    const bd = new Date(dob);
    if (isNaN(bd.getTime())) return "";
    const today = new Date();
    let yrs = today.getFullYear() - bd.getFullYear();
    const m = today.getMonth() - bd.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < bd.getDate())) yrs--;
    return String(yrs);
  };

  useEffect(() => {
    const upd = () => setIsMobile(window.innerWidth <= 920);
    upd();
    let t;
    const onResize = () => { clearTimeout(t); t = setTimeout(upd, 120); };
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, []);

  useEffect(() => {
    const onKey = (e) => { if (e.key === "Escape") onClose(); };
    document.addEventListener("keydown", onKey);
    return () => document.removeEventListener("keydown", onKey);
  }, [onClose]);

  // -------------------------------
  // Auto-generate ID (includes ExitEmployees node)
  // - Always runs when modal opens
  // - Scans nodes: ExitEmployees, EmployeeBioData, WorkerBioData, Workers, EmployeeData
  // - Prefers JW prefix; otherwise picks prefix with highest numeric suffix
  // -------------------------------
  useEffect(() => {
    if (!isOpen) {
      setIdAutoGenerated(false);
      const idEl = document.querySelector('input[name="idNo"]');
      if (idEl) idEl.removeAttribute("disabled");
      return;
    }

    let mounted = true;

    async function fetchAndGenerateId() {
      try {
        const nodesToCheck = ["ExitEmployees", "EmployeeBioData", "WorkerBioData", "Workers", "EmployeeData"];
        const allIds = [];

        for (const node of nodesToCheck) {
          try {
            const snap = await firebaseDB.child(node).once("value");
            const v = snap.val();
            if (!v) continue;
            Object.keys(v).forEach((k) => {
              const rec = v[k];
              if (!rec) return;
              // try common id properties
              const id = rec.idNo || rec.id || rec.empId || rec.employeeId || rec.ID;
              if (!id) return;
              const s = String(id).trim();
              if (s) allIds.push(s);
            });
          } catch (innerErr) {
            // ignore read errors for individual nodes
            // console.warn("read node failed", node, innerErr);
          }
        }

        // fallback: if none found, still attempt EmployeeBioData once more
        if (allIds.length === 0) {
          try {
            const snap = await firebaseDB.child("EmployeeBioData").once("value");
            const v = snap.val();
            if (v) {
              Object.keys(v).forEach((k) => {
                const rec = v[k];
                if (!rec) return;
                const id = rec.idNo || rec.id || rec.empId || rec.employeeId || rec.ID;
                if (!id) return;
                const s = String(id).trim();
                if (s) allIds.push(s);
              });
            }
          } catch (e) {
            // ignore
          }
        }

        let generated = "JW00001";
        const normalized = allIds.map((x) => String(x).trim().toUpperCase()).filter(Boolean);

        if (normalized.length > 0) {
          // JW matches
          const jwMatches = normalized
            .map((id) => {
              const m = id.match(/^JW(\d+)$/i);
              if (!m) return null;
              return { raw: id, num: parseInt(m[1], 10), digits: m[1].length };
            })
            .filter(Boolean);

          if (jwMatches.length > 0) {
            let max = jwMatches[0];
            for (let i = 1; i < jwMatches.length; i++) {
              if (jwMatches[i].num > max.num) max = jwMatches[i];
            }
            const nextNum = max.num + 1;
            const padded = String(nextNum).padStart(max.digits, "0");
            generated = `JW${padded}`;
          } else {
            // parse any PREFIX + digits
            const parsed = normalized
              .map((id) => {
                const m = id.match(/^([A-Z]+)(\d+)$/i);
                if (!m) return null;
                return { prefix: m[1].toUpperCase(), num: parseInt(m[2], 10), digits: m[2].length };
              })
              .filter(Boolean);

            if (parsed.length > 0) {
              const map = {};
              parsed.forEach((p) => {
                if (!map[p.prefix]) map[p.prefix] = { maxNum: p.num, digits: p.digits };
                else {
                  if (p.num > map[p.prefix].maxNum) map[p.prefix].maxNum = p.num;
                  if (p.digits > map[p.prefix].digits) map[p.prefix].digits = p.digits;
                }
              });
              let chosenPrefix = null;
              let chosenNum = -Infinity;
              let chosenDigits = 0;
              Object.keys(map).forEach((pref) => {
                if (map[pref].maxNum > chosenNum) {
                  chosenNum = map[pref].maxNum;
                  chosenPrefix = pref;
                  chosenDigits = map[pref].digits;
                }
              });
              if (chosenPrefix) {
                const nextNum = chosenNum + 1;
                const padded = String(nextNum).padStart(chosenDigits, "0");
                generated = `${chosenPrefix}${padded}`;
              } else {
                generated = "JW00001";
              }
            } else {
              generated = "JW00001";
            }
          }
        } else {
          generated = "JW00001";
        }

        if (!mounted) return;
        setFormData((prev) => ({ ...prev, idNo: generated }));
        setIdAutoGenerated(true);

        setTimeout(() => {
          const idEl = document.querySelector('input[name="idNo"]');
          if (idEl) idEl.setAttribute("disabled", "true");
        }, 30);
      } catch (err) {
        console.error("Auto ID generation error:", err);
        if (!mounted) return;
        setFormData((prev) => ({ ...prev, idNo: "JW00001" }));
        setIdAutoGenerated(true);
        setTimeout(() => {
          const idEl = document.querySelector('input[name="idNo"]');
          if (idEl) idEl.setAttribute("disabled", "true");
        }, 30);
      }
    }

    fetchAndGenerateId();

    return () => { mounted = false; };
  }, [isOpen]);

  // Duplicate ID check
  const checkDuplicateId = async (idNo) => {
    if (!idNo) return null;
    try {
      const q = await firebaseDB.child("EmployeeBioData").orderByChild("idNo").equalTo(idNo).once("value");
      const val = q.val();
      if (!val) {
        // check ExitEmployees
        const q2 = await firebaseDB.child("ExitEmployees").orderByChild("idNo").equalTo(idNo).once("value");
        const val2 = q2.val();
        if (!val2) {
          const q3 = await firebaseDB.child("WorkerBioData").orderByChild("idNo").equalTo(idNo).once("value");
          const val3 = q3.val();
          if (!val3) return null;
          const key3 = Object.keys(val3)[0];
          return { recordId: key3, ...val3[key3] };
        }
        const key2 = Object.keys(val2)[0];
        return { recordId: key2, ...val2[key2] };
      }
      const key = Object.keys(val)[0];
      const rec = val[key];
      return { recordId: key, ...rec };
    } catch (err) {
      console.error("checkDuplicateId error:", err);
      return null;
    }
  };

  // central change handler
  const handleChange = (e) => {
    if (!e || !e.target) return;
    const { name, value, type, checked } = e.target;

    if (name === "idNo" && idAutoGenerated) {
      return;
    }

    if (name === "mobileNo1" || name === "mobileNo2" || name.includes("mobile1") || name.includes("mobile2")) {
      if (value && !/^\d*$/.test(value)) return;
      if (value.length > 10) return;
    }
    if (name.toLowerCase().includes("pincode")) {
      if (value && !/^\d*$/.test(value)) return;
      if (value.length > 6) return;
    }

    if (type === "checkbox" && (name === "workingSkills" || name === "healthIssues")) {
      setFormData((prev) => {
        const arr = prev[name] || [];
        return { ...prev, [name]: checked ? [...arr, value] : arr.filter((x) => x !== value) };
      });
      return;
    }

    if (type === "checkbox" && name === "sameAsPermanent") {
      if (checked) {
        setFormData((prev) => ({
          ...prev,
          presentAddress: prev.permanentAddress || "",
          presentStreet: prev.permanentStreet || "",
          presentLandmark: prev.permanentLandmark || "",
          presentVillage: prev.permanentVillage || "",
          presentMandal: prev.permanentMandal || "",
          presentDistrict: prev.permanentDistrict || "",
          presentState: prev.permanentState || "",
          presentPincode: prev.permanentPincode || "",
        }));
      }
      setFormData((prev) => ({ ...prev, [name]: checked }));
      setErrors((prev) => {
        const n = { ...prev };
        delete n.presentAddress;
        delete n.presentStreet;
        delete n.presentVillage;
        delete n.presentMandal;
        delete n.presentDistrict;
        delete n.presentState;
        delete n.presentPincode;
        return n;
      });
      return;
    }

    if (name.includes(".") && name.startsWith("emergencyContact")) {
      const [parent, field] = name.split(".");
      setFormData((prev) => ({ ...prev, [parent]: { ...(prev[parent] || {}), [field]: value } }));
      setErrors((prev) => { const n = { ...prev }; if (n[parent] && n[parent][field]) delete n[parent][field]; return n; });
      return;
    }

    if (name === "dateOfBirth") {
      const yrs = computeYears(value);
      setFormData((prev) => ({ ...prev, dateOfBirth: value, years: yrs }));
      setErrors((p) => { const n = { ...p }; delete n.dateOfBirth; delete n.years; return n; });
      return;
    }

    if (type === "file") {
      const file = e.target.files?.[0] || null;
      if (!file) {
        setFormData((prev) => ({ ...prev, employeePhotoFile: null }));
        return;
      }
      const validTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];
      if (!validTypes.includes(file.type)) {
        setErrors((prev) => ({ ...prev, employeePhoto: "Only JPG/PNG/GIF allowed" }));
        return;
      }
      if (file.size > 100 * 1024) {
        setErrors((prev) => ({ ...prev, employeePhoto: "Image must be less than 100KB" }));
        return;
      }
      setFormData((prev) => ({ ...prev, employeePhotoFile: file }));
      setErrors((prev) => { const n = { ...prev }; delete n.employeePhoto; return n; });
      return;
    }

    setFormData((prev) => ({ ...prev, [name]: value }));
    setErrors((prev) => { const n = { ...prev }; if (n[name]) delete n[name]; return n; });
  };

  const handleBlur = async (e) => {
    if (!e || !e.target) return;
    const { name, value } = e.target;
    if (!name) return;

    const fieldErrors = {};
    if (name === "mobileNo1" || name === "mobileNo2") {
      if (value && !validateMobileNumber(value)) fieldErrors[name] = "Mobile number must be 10 digits";
    }
    if (name === "permanentPincode" || name === "presentPincode") {
      if (value && !validatePincode(value)) fieldErrors[name] = "Pin code must be 6 digits";
    }
    if (name === "dateOfBirth") {
      if (value && !isOver18(value)) fieldErrors[name] = "Worker must be at least 18 years old";
      else setFormData((prev) => ({ ...prev, years: computeYears(value) }));
    }

    if (name === "idNo") {
      const id = (value || "").trim();
      if (id) {
        try {
          const existing = await checkDuplicateId(id);
          if (existing) {
            setExistingEmployee(existing);
            setShowIdExistsModal(true);
            fieldErrors.idNo = `ID already exists for ${existing.firstName || existing.name || ""} ${existing.lastName || ""}`.trim();
          } else {
            setExistingEmployee(null);
            setShowIdExistsModal(false);
          }
        } catch (err) {
          console.warn("Duplicate check failed", err);
        }
      }
    }

    setErrors((prev) => ({ ...prev, ...fieldErrors }));
  };

  // validation helpers & validators
  const checkValidationForStep = (s) => {
    const e = {};
    switch (s) {
      case 1: {
        if (!formData.idNo || String(formData.idNo).trim() === "") e.idNo = "Enter ID No";
        else if (String(formData.idNo).trim().length < 3) e.idNo = "Enter Valid ID No";
        if (!formData.date || String(formData.date).trim() === "") e.date = "Enter Date of Joining";
        if (!formData.firstName || formData.firstName.trim() === "") e.firstName = "First name required";
        if (!formData.lastName || formData.lastName.trim() === "") e.lastName = "Last name required";
        if (!formData.gender) e.gender = "Gender is required";
        if (!formData.dateOfBirth) e.dateOfBirth = "DOB is required";
        else if (!isOver18(formData.dateOfBirth)) e.dateOfBirth = "Must be at least 18 years old";
        if (!formData.years) e.years = "Years is required";
        else {
          const num = Number(formData.years);
          if (!Number.isFinite(num) || num < 18 || num > 100) e.years = "Enter valid years";
        }
        if (!formData.mobileNo1) e.mobileNo1 = "Mobile No. 1 is required";
        else if (!validateMobileNumber(formData.mobileNo1)) e.mobileNo1 = "Mobile number must be 10 digits";
        if (formData.mobileNo2 && !validateMobileNumber(formData.mobileNo2)) e.mobileNo2 = "Mobile number must be 10 digits";
        if (formData.employeePhotoFile) {
          const file = formData.employeePhotoFile;
          const validTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];
          if (!validTypes.includes(file.type)) e.employeePhoto = "Only JPG/PNG/GIF allowed";
          if (file.size > 100 * 1024) e.employeePhoto = "Image must be less than 100KB";
        }
        break;
      }
      case 2: {
        if (!formData.permanentAddress || formData.permanentAddress.trim() === "") e.permanentAddress = "Address is required";
        if (!formData.permanentStreet || formData.permanentStreet.trim() === "") e.permanentStreet = "Street is required";
        if (!formData.permanentVillage || formData.permanentVillage.trim() === "") e.permanentVillage = "Village/Town is required";
        if (!formData.permanentMandal || formData.permanentMandal.trim() === "") e.permanentMandal = "Mandal is required";
        if (!formData.permanentDistrict || formData.permanentDistrict.trim() === "") e.permanentDistrict = "District is required";
        if (!formData.permanentState || formData.permanentState.trim() === "") e.permanentState = "State is required";
        if (!formData.permanentPincode) e.permanentPincode = "Pin Code is required";
        else if (!validatePincode(formData.permanentPincode)) e.permanentPincode = "Pin code must be 6 digits";
        break;
      }
      case 3: {
        if (!formData.presentAddress || formData.presentAddress.trim() === "") e.presentAddress = "Address is required";
        if (!formData.presentStreet || formData.presentStreet.trim() === "") e.presentStreet = "Street is required";
        if (!formData.presentVillage || formData.presentVillage.trim() === "") e.presentVillage = "Village/Town is required";
        if (!formData.presentMandal || formData.presentMandal.trim() === "") e.presentMandal = "Mandal is required";
        if (!formData.presentDistrict || formData.presentDistrict.trim() === "") e.presentDistrict = "District is required";
        if (!formData.presentState || formData.presentState.trim() === "") e.presentState = "State is required";
        if (!formData.presentPincode) e.presentPincode = "Pin Code is required";
        else if (!validatePincode(formData.presentPincode)) e.presentPincode = "Pin code must be 6 digits";
        break;
      }
      case 4: {
        if (!formData.maritalStatus) e.maritalStatus = "Marital Status is required";
        if (!formData.religion) e.religion = "Religion is required";
        if (!formData.cast) e.cast = "Cast is required";
        break;
      }
      case 5: {
        if (!formData.qualification) e.qualification = "Qualification is required";
        if (!formData.primarySkill) e.primarySkill = "Primary Skill is required";
        if (formData.workingSkills && formData.workingSkills.length === 0) e.workingSkills = "At least one work experience is required";
        if (!formData.motherTongue) e.motherTongue = "Mother Tongue is required";
        if (!formData.languages) e.languages = "Languages are required";
        break;
      }
      case 6:
        break;
      case 7: {
        const ec1 = formData.emergencyContact1 || {};
        if (!ec1.name) e["emergencyContact1.name"] = "Name required";
        if (!ec1.relation) e["emergencyContact1.relation"] = "Relation required";
        if (!ec1.mobile1) e["emergencyContact1.mobile1"] = "Mobile required";
        else if (!validateMobileNumber(ec1.mobile1)) e["emergencyContact1.mobile1"] = "Mobile must be 10 digits";
        break;
      }
      case 8: {
        const ec2 = formData.emergencyContact2 || {};
        if (!ec2.name) e["emergencyContact2.name"] = "Name required";
        if (!ec2.relation) e["emergencyContact2.relation"] = "Relation required";
        if (!ec2.mobile1) e["emergencyContact2.mobile1"] = "Mobile required";
        else if (!validateMobileNumber(ec2.mobile1)) e["emergencyContact2.mobile1"] = "Mobile must be 10 digits";
        break;
      }
      case 9:
        break;
      case 10: {
        if (!formData.basicSalary) e.basicSalary = "Enter valid Salary";
        if (!formData.pageNo) e.pageNo = "Enter Page No";
        const pp = (formData.phonePayNo || "").trim();
        const gp = (formData.googlePayNo || "").trim();
        if (pp) {
          if (!validateMobileNumber(pp)) e.phonePayNo = "PhonePe/Pay number must be 10 digits";
          if (!formData.phonePayName || String(formData.phonePayName).trim() === "") e.phonePayName = "PhonePe/Pay name required";
        }
        if (gp) {
          if (!validateMobileNumber(gp)) e.googlePayNo = "Google Pay number must be 10 digits";
          if (!formData.googlePayName || String(formData.googlePayName).trim() === "") e.googlePayName = "Google Pay name required";
        }
        break;
      }
      default: break;
    }
    return e;
  };

  const mapErrorsForChildren = (errs) => {
    const out = {};
    Object.keys(errs || {}).forEach((k) => {
      if (k.includes(".")) {
        const parts = k.split(".");
        let cur = out;
        for (let i = 0; i < parts.length; i++) {
          const p = parts[i];
          if (i === parts.length - 1) cur[p] = errs[k];
          else { cur[p] = cur[p] || {}; cur = cur[p]; }
        }
      } else {
        out[k] = errs[k];
      }
    });
    return out;
  };

  const validateCurrentStep = (s) => {
    const e = checkValidationForStep(s);
    if (Object.keys(e).length > 0) {
      const nested = mapErrorsForChildren(e);
      setErrors((prev) => ({ ...prev, ...e, ...nested }));
      setTimeout(() => {
        const firstKey = Object.keys(e)[0];
        const sel = `[name="${firstKey}"]`;
        const el = document.querySelector(sel) || document.querySelector(`[name="${firstKey.split(".").join(".")}"]`);
        if (el && el.focus) el.focus();
      }, 50);
      return false;
    }
    setErrors((prev) => {
      const n = { ...prev };
      Object.keys(e).forEach((k) => { if (n[k]) delete n[k]; });
      Object.keys(e).forEach((k) => {
        if (k.includes(".")) {
          const [parent, child] = k.split(".");
          if (n[parent] && n[parent][child]) { delete n[parent][child]; if (Object.keys(n[parent]).length === 0) delete n[parent]; }
        }
      });
      return n;
    });
    return true;
  };

  const validateAllAndJump = async () => {
    for (let s = 1; s <= TOTAL_STEPS; s += 1) {
      const e = checkValidationForStep(s);
      if (Object.keys(e).length > 0) {
        const nested = mapErrorsForChildren(e);
        setErrors((prev) => ({ ...prev, ...e, ...nested }));
        setStep(s);
        setTimeout(() => {
          const firstKey = Object.keys(e)[0];
          const el = document.querySelector(`[name="${firstKey}"]`);
          if (el && el.focus) el.focus();
        }, 80);
        return false;
      }
    }
    const id = (formData.idNo || "").trim();
    if (id) {
      const existing = await checkDuplicateId(id);
      if (existing) {
        setExistingEmployee(existing);
        setShowIdExistsModal(true);
        setErrors((prev) => ({ ...prev, idNo: "ID already exists" }));
        setStep(1);
        return false;
      }
    }
    return true;
  };

  const handlePrimaryAction = async (ev) => {
    ev?.preventDefault?.();
    if (step < TOTAL_STEPS) {
      if (validateCurrentStep(step)) setStep((s) => Math.min(TOTAL_STEPS, s + 1));
      return;
    }
    if (!(await validateAllAndJump())) return;

    setIsSubmitting(true);
    try {
      let photoURL = DEFAULT_PHOTO_URL;
      if (formData.employeePhotoFile) {
        const ext = formData.employeePhotoFile.name.split(".").pop();
        const fileName = `employee-photos/${(formData.idNo || "unknown")}-${Date.now()}.${ext}`;
        const fileRef = storageRef.child(fileName);
        const snap = await uploadFile(fileRef, formData.employeePhotoFile);
        photoURL = await getDownloadURL(snap.ref);
      }

      const submitData = { ...formData, employeePhoto: photoURL };
      delete submitData.employeePhotoFile;

      const listRef = firebaseDB.child("EmployeeBioData");
      const newRef = listRef.push();
      await newRef.set(submitData);
      const recordId = newRef.key;
      const name = `${formData.firstName || ""} ${formData.lastName || ""}`.trim();

      setSuccessInfo({ idNo: formData.idNo, name, recordId });
      setSuccessOpen(true);

      if (typeof onSaved === "function") {
        try { onSaved({ id: recordId, ...submitData }); } catch { }
      }

      // RESET FORM
      setFormData({ ...initialFormData });
      setErrors({});
      setStep(1);
      setIdAutoGenerated(false);
      const idEl = document.querySelector('input[name="idNo"]');
      if (idEl) idEl.removeAttribute("disabled");
    } catch (err) {
      console.error("submit error", err);
      alert("Error submitting form: " + (err?.message || err));
    } finally { setIsSubmitting(false); }
  };

  const handlePrev = (ev) => {
    ev?.preventDefault?.();
    if (step > 1) setStep((s) => s - 1);
  };

  const renderStep = (s) => {
    const childErrors = mapErrorsForChildren(errors);
    const common = {
      formData,
      errors: childErrors,
      handleChange,
      handleBlur,
      handleFileChange: handleChange,
      nextStep: () => setStep((p) => Math.min(TOTAL_STEPS, p + 1)),
      prevStep: () => setStep((p) => Math.max(1, p - 1)),
    };
    switch (s) {
      case 1: return <BasicInformation {...common} />;
      case 2: return <PermanentAddress {...common} />;
      case 3: return <PresentAddress {...common} />;
      case 4: return <PersonalInformation {...common} />;
      case 5: return <QualificationSkills {...common} />;
      case 6: return <HealthDetails {...common} />;
      case 7: return <EmergencyContact1 {...common} />;
      case 8: return <EmergencyContact2 {...common} />;
      case 9: return <EmergencyContact3 {...common} />;
      case 10: return <BankDetails {...common} handleSubmit={handlePrimaryAction} isSubmitting={isSubmitting} />;
      default: return null;
    }
  };

  // Success modal
  const SuccessModal = ({ open, onClose, info }) => {
    if (!open) return null;
    const { idNo, name } = info || {};
    return (
      <div className="wb-success-backdrop" onClick={onClose}>
        <div className="wb-success-card bg-warning" onClick={(e) => e.stopPropagation()}>
          <div className="wb-success-title text-black">Saved Successfully</div>
          <div className="wb-success-sub text-black"> ID No: {idNo || "â€”"}</div>
          <div className="wb-success-sub text-black">{name || "â€”"} </div>
          <div style={{ display: "flex", justifyContent: "flex-end", marginTop: 12 }}>
            <button className="btn btn-primary" onClick={() => { setSuccessOpen(false); }}>Done</button>
          </div>
        </div>
      </div>
    );
  };

  // ID Exists modal
  const IdExistsModal = () => {
    if (!showIdExistsModal || !existingEmployee) return null;
    const name = `${existingEmployee.firstName || existingEmployee.name || ""} ${existingEmployee.lastName || ""}`.trim();
    return (
      <div className="modal-backdrop-custom" role="dialog" aria-modal="true" onClick={() => setShowIdExistsModal(false)}>
        <div className="modal-card-custom" onClick={(e) => e.stopPropagation()}>
          <div className="modal-header-custom">
            <div style={{ display: "flex", alignItems: "center", gap: 12 }}>
              <div style={{ width: 44, height: 44, borderRadius: 10, background: "linear-gradient(135deg,#ff7a7a,#ffb677)", display: "flex", alignItems: "center", justifyContent: "center", color: "#fff", fontWeight: 700 }}>
                ID
              </div>
              <div>
                <h5 style={{ margin: 0 }}>ID Already Exists</h5>
                <small style={{ color: "#6b7280" }}>Please choose a different ID</small>
              </div>
            </div>
            <button className="btn-close-custom" aria-label="Close" onClick={() => setShowIdExistsModal(false)}>âœ•</button>
          </div>

          <div className="modal-body-custom">
            <p style={{ marginBottom: 8 }}>This ID number is already associated with an existing employee:</p>
            <div style={{ display: "grid", gridTemplateColumns: "120px 1fr", gap: 6, marginBottom: 8 }}>
              <div style={{ color: "#6b7280" }}>Name</div>
              <div style={{ fontWeight: 600 }}>{name || "N/A"}</div>
              <div style={{ color: "#6b7280" }}>Record ID</div>
              <div style={{ fontFamily: "monospace", color: "#0f172a" }}>{existingEmployee.recordId || "N/A"}</div>
            </div>
            <div style={{ color: "#6b7280", fontSize: 13 }}>
              You can close this dialog and modify the ID, or contact administration if this is unexpected.
            </div>
          </div>

          <div className="modal-footer-custom">
            <button className="btn btn-secondary" onClick={() => setShowIdExistsModal(false)}>Close</button>
          </div>
        </div>
      </div>
    );
  };

  if (!isOpen) return null;

  return (
    <>
      <div className="wb-backdrop" onClick={onClose}>
        <div className="wb-card" onClick={(e) => e.stopPropagation()} role="dialog" aria-modal="true" aria-labelledby="workerFormTitle">
          <div className="wb-header">
            <div style={{ display: "flex", flexDirection: "column" }}>
              <div id="workerFormTitle" className="wb-title">Worker / Employee Form</div>
              <div className="wb-step-counter">Step {step} of {TOTAL_STEPS}</div>
            </div>
            <div>
              <button className="wb-close-btn" title="Close" onClick={onClose}>âœ•</button>
            </div>
          </div>

          <div className="wb-body">
            {!isMobile && (
              <div className="wb-sidebar" aria-hidden>
                {Array.from({ length: TOTAL_STEPS }).map((_, i) => {
                  const idx = i + 1;
                  return (
                    <button
                      key={idx}
                      type="button"
                      className={`wb-step-btn ${step === idx ? "active" : ""}`}
                      onClick={() => setStep(idx)}
                    >
                      {idx}. {stepTitleFor(idx)}
                    </button>
                  );
                })}
              </div>
            )}

            <div className="wb-content">
              {isMobile ? (
                <div>
                  {Array.from({ length: TOTAL_STEPS }).map((_, i) => {
                    const idx = i + 1;
                    return (
                      <div className="wb-accordion-item" key={idx}>
                        <button className="wb-accordion-header" onClick={() => setStep(idx)} aria-expanded={step === idx}>
                          <span>{idx}. {stepTitleFor(idx)}</span>
                          <span className="wb-accordion-arrow">{step === idx ? "â–¾" : "â–¸"}</span>
                        </button>
                        {step === idx && <div className="wb-accordion-body">{renderStep(idx)}</div>}
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div>{renderStep(step)}</div>
              )}
            </div>
          </div>

          <div className="wb-footer">
            <button className="wb-secondary-btn me-2" onClick={handlePrev} disabled={step <= 1}>Previous</button>
            <button className="wb-primary-btn" onClick={handlePrimaryAction} disabled={isSubmitting}>
              {step < TOTAL_STEPS ? "Continue" : (isSubmitting ? "Saving..." : "Submit")}
            </button>
          </div>
        </div>
      </div>

      <SuccessModal open={successOpen} onClose={() => setSuccessOpen(false)} info={successInfo} />
      <IdExistsModal />
    </>
  );
};

function stepTitleFor(idx) {
  switch (idx) {
    case 1: return "Basic Info";
    case 2: return "Permanent Address";
    case 3: return "Present Address";
    case 4: return "Personal Info";
    case 5: return "Qualification & Skills";
    case 6: return "Health Details";
    case 7: return "Emergency 1";
    case 8: return "Emergency 2";
    case 9: return "Emergency 3";
    case 10: return "Bank & Pay";
    default: return `Step ${idx}`;
  }
}

export default WorkerBioDataForm;
